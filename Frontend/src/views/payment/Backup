import React, { useEffect, useState } from "react";
import { getInvoiceDetail } from "./PaymentService";
import { toast } from "react-toastify";
import { Link, useParams } from "react-router-dom";
import { Card } from "react-bootstrap";
import { Grid, Button, Badge, AppBar, Toolbar } from "@material-ui/core";
import MaterialTable, { MTableToolbar } from "material-table";
import ArrowBackIcon from "@material-ui/icons/ArrowBack";

toast.configure({
    limit: 3,
    autoClose: 4000,
    closeOnClick: true,
    hideProgressBar: false,
    draggable: false,
});

const OrderDetail = (props) => {
    const { order_number } = useParams();
    const [data, setData] = useState([]);
    const [selectedRow, setSelectedRow] = useState(null);
    const [firstData, setFirstData] = useState({});

    const updateTableData = () => {
        getInvoiceDetail({ id: order_number })
            .then((res) => {
                let result = res.data.data;
                if (result.length === 0)
                    return props.history.push("/billing/transaction-history");
                for (let i = 0; i < result.length; i++) {
                    if (result[i].ord_store_infomation.includes("Amazon")) {
                        let tmp = result[i].dtime_entered.split("T");
                        result[i].dtime_entered = tmp[0];
                        let tmpOrderStatus = result[i].order_status;
                        switch (tmpOrderStatus) {
                            case 0:
                                result[i].order_status = "Cooling Off";
                                break;
                            case 1:
                                result[i].order_status = "Pending Design";
                                break;
                            case 2:
                                result[i].order_status =
                                    "Waiting Payment Confirm";
                                break;
                            case 5:
                                result[i].order_status = "In Production";
                                break;
                            case 6:
                                result[i].order_status = "Request Cancel";
                                break;
                            case 7:
                                result[i].order_status = "Cancelled";
                                break;
                            case 8:
                                result[i].order_status = "Request Resend";
                                break;
                            case 9:
                                result[i].order_status = "Resend";
                                break;
                            case 10:
                                result[i].order_status = "Request Refund";
                                break;
                            case 11:
                                result[i].order_status = "Partially Refund";
                                break;
                            case 12:
                                result[i].order_status = "Full Refund";
                                break;
                            case 15:
                                result[i].order_status = "Shipped";
                                break;
                        }
                        let tmpPaymentStatus = result[i].payment_status;
                        switch (tmpPaymentStatus) {
                            case 0:
                                result[i].payment_status = "Unpaid";
                                break;
                            case 1:
                                result[i].payment_status = "Partially Paid";
                                break;
                            case 2:
                                result[i].payment_status = "Whitelist";
                                break;
                            case 3:
                                result[i].payment_status = "Paid";
                                break;
                        }
                        data.push(result[i]);
                        if (i === 0) setFirstData(result[i]);
                    }
                }
                setData([...data]);
            })
            .catch((err) => toast.error(err));
    };
    useEffect(() => {
        updateTableData();
    }, []);
    console.log(firstData);

    return (
        <>
            <Card>
                <Card.Header>
                    <h3>Order {order_number}</h3>
                    <h6>
                        Order placed on {firstData.dtime_entered} by{" "}
                        {firstData.user_name}
                    </h6>
                </Card.Header>
                <Card.Body>
                    <Card>
                        <Card.Header>
                            <h3
                                style={{
                                    align: "left",
                                }}
                            >
                                Invoice
                            </h3>
                            <h3
                                style={{
                                    align: "center",
                                }}
                            >
                                Tracking
                            </h3>
                        </Card.Header>
                        {data.map((item) => (
                            <Card key={item.id}>
                                <Card.Body
                                    style={{
                                        fontFamily:
                                            "'Poppins-Regular',sans-serif",
                                    }}
                                >
                                    <Card.Title>Date ordered:</Card.Title>
                                    <Card.Title>Quantity:</Card.Title>
                                    <Card.Title>Base cost:</Card.Title>
                                    <Card.Text>{item.order_status}</Card.Text>
                                    <Card.Text>{item.payment_status}</Card.Text>
                                    <Card.Text>
                                        {item.unfulfill_quantity}
                                    </Card.Text>
                                    <Card.Text>{item.ord_price}$</Card.Text>
                                    <Card.Title>Product SKU:</Card.Title>
                                    <Card.Title>Supplier:</Card.Title>
                                    <Card.Title>Carrier:</Card.Title>
                                    <Card.Title>Tracking ID:</Card.Title>
                                    <Card.Text>{item.sku}</Card.Text>
                                    <Card.Text>{item.payment_status}</Card.Text>
                                    <Card.Text>
                                        {item.unfulfill_quantity}
                                    </Card.Text>
                                    <Card.Text>{item.ord_price}$</Card.Text>
                                </Card.Body>
                                {/* <Card.Text>
            With supporting text below as a natural lead-in to additional
            content.
          </Card.Text> */}
                            </Card>
                        ))}
                    </Card>
                </Card.Body>
            </Card>
            <AppBar position="sticky">
                <Toolbar
                    style={{
                        display: "flex",
                        justifyContent: "flex-end",
                        alignItems: "center",
                    }}
                >
                    <Button className="mr-3 mb-0" variant="secondary">
                        <ArrowBackIcon />
                        Back
                    </Button>
                </Toolbar>
            </AppBar>
        </>
    );
};

export default OrderDetail;
